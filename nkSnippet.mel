/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// ボイラープレート
// /////////////////////////////////////////////////////////////////////////////
// ファイル
/*1.0.0*/proc string escapeStringForPythonAtFile(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "'": $escapedText += "\\'"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string getSourceFilename(string $procName) {string $filename;string $thisIs = `whatIs $procName`;string $pattern1 = "^Mel procedure found in: *";string $pattern2 = "^Script found in: *";if (`match $pattern1 $thisIs` != "") {$filename = `substitute $pattern1 $thisIs ""`;}else if (`match $pattern2 $thisIs` != "") {$filename = `substitute $pattern2 $thisIs ""`;}return $filename;}proc string getSourceDirname(string $procName) {return dirname(getSourceFilename($procName));}proc int existsDirname(string $dirname) {return `filetest -d $dirname`;}proc int existsFilename(string $filename) {return `filetest -f $filename`;}proc string[] getDirnames(string $dirname) {string $subDirnames[];string $filenames[] = `getFileList -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {string $subDirname = $dirname + "/" + $filenames[$i];if (existsDirname($subDirname)) {$subDirnames[`size $subDirnames`] = $subDirname;}}$subDirnames = `sort $subDirnames`;return $subDirnames;}proc string[] getFilenames(string $dirname, string $filenamePattern) {string $filenames[] = `getFileList -fs $filenamePattern -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {$filenames[$i] = $dirname + "/" + $filenames[$i];}$filenames = `sort $filenames`;return $filenames;}proc string[] readAllLines(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $lines[];if (existsFilename($filename)) {python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f:" + " lines = tuple(s.rstrip() for s in f.readlines())");$lines = `python("lines")`;}return $lines;}proc string readAllText(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $text;if (existsFilename($filename)) {python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f: text = f.read()");$text = `python("text")`;}return $text;}proc int writeAllText(string $filename, string $encoding, string $input) {string $dirname = dirname($filename);if (!existsDirname($dirname)) return false;$input = escapeStringForPythonAtFile($input);if (!`size $encoding`) $encoding = "utf-8";python("with open('" + $filename + "', 'w', encoding='" + $encoding + "') as f:" + " num = f.write('" + $input + "')");return (`python("num")` > 0);}
// UIコントロール
/*1.1.0*/proc int windowGetExists(string $control) {return `window -q -ex $control`;}proc int windowGetVisible(string $control) {return `window -q -vis $control`;}proc windowClose(string $control) {if (windowGetExists($control)) {deleteUI $control;}}proc windowPrefRemove(string $control) {if (windowGetExists($control)) windowClose($control);if (`windowPref -ex $control`) windowPref -r $control;}proc int[] checkBoxGrpGetEnable(string $control) {return `checkBoxGrp -q -en $control`;}proc checkBoxGrpSetEnable(int $enable, string $control) {checkBoxGrp -e -en $enable $control;}proc int[] checkBoxGrpGetValues(int $ncb, string $control) {$ncb = `clamp 1 4 $ncb`;int $values[];if ($ncb > 0) $values[0] = `checkBoxGrp -q -v1 $control`;if ($ncb > 1) $values[1] = `checkBoxGrp -q -v2 $control`;if ($ncb > 2) $values[2] = `checkBoxGrp -q -v3 $control`;if ($ncb > 3) $values[3] = `checkBoxGrp -q -v4 $control`;return $values;}proc checkBoxGrpSetValues(int $values[], string $control) {int $ncb = `size $values`;if ($ncb > 0) checkBoxGrp -e -v1 $values[0] $control;if ($ncb > 1) checkBoxGrp -e -v2 $values[1] $control;if ($ncb > 2) checkBoxGrp -e -v3 $values[2] $control;if ($ncb > 3) checkBoxGrp -e -v4 $values[3] $control;}proc int radioButtonGrpGetEnable(string $control) {return `radioButtonGrp -q -en $control`;}proc radioButtonGrpSetEnable(int $enable, string $control) {radioButtonGrp -e -en $enable $control;}proc int radioButtonGrpGetSelect(string $control) {return (`radioButtonGrp -q -sl $control` - 1);}proc radioButtonGrpSetSelect(int $index, string $control) {radioButtonGrp -e -sl ($index + 1) $control;}proc int textFieldGrpGetEnable(string $control) {return `textFieldGrp -q -en $control`;}proc textFieldGrpSetEnable(int $enable, string $control) {textFieldGrp -e -en $enable $control;}proc int textFieldGrpGetInsertionPosition(string $control) {return (`textFieldGrp -q -ip $control` - 1);}proc textFieldGrpSetInsertionPosition(int $position, string $control) {textFieldGrp -e -ip ($position + 1) $control;}proc string textFieldGrpGetText(string $control) {return `textFieldGrp -q -tx $control`;}proc textFieldGrpSetText(string $text, string $control) {textFieldGrp -e -tx $text $control;}proc textScrollListAppend(string $label, string $control) {textScrollList -e -a $label $control;}proc textScrollListAppendPosition(int $index, string $label, string $control) {textScrollList -e -ap ($index + 1) $label $control;}proc textScrollListRemoveAll(string $control) {textScrollList -e -ra $control;}proc textScrollListRemoveIndexedItem(int $index, string $control) {textScrollList -e -rii ($index + 1) $control;}proc textScrollListSetSelectIndexedItem(int $index, string $control) {textScrollList -e -sii ($index + 1) $control;}proc textScrollListSetSelectIndexedItems(int $indices[], string $control) {for ($i in $indices) {textScrollList -e -sii ($i + 1) $control;}}proc int[] textScrollListGetSelectIndexedItems(string $control) {int $indices[] = `textScrollList -q -sii $control`;for ($i = 0; $i < `size $indices`; $i++) $indices[$i] -= 1;return $indices;}proc int textScrollListGetSelectIndexedItem(string $control) {int $indices[] = textScrollListGetSelectIndexedItems($control);return ((`size $indices`) ? $indices[0] : -1);}proc string[] textScrollListGetSelectItems(string $control) {return `textScrollList -q -si $control`;}proc string textScrollListGetSelectItem(string $control) {string $items[] = textScrollListGetSelectItems($control);return ((`size $items`) ? $items[0] : "");}proc workspaceControlClose(string $control) {workspaceControl -e -cl $control;}proc int workspaceControlGetExists(string $control) {return `workspaceControl -q -ex $control`;}proc int workspaceControlGetFloating(string $control) {return `workspaceControl -q -fl $control`;}proc workspaceControlSetFloating(int $state, string $control) {workspaceControl -e -fl $state $control;}proc int workspaceControlGetVisible(string $control) {return `workspaceControl -q -vis $control`;}proc int isWorkspaceControl(string $control) {return `objectTypeUI $control` == "workspaceControl";}proc buildWorkspaceControl(string $workspaceControlName,string $mainProcName,string $buildProcName) {if (!workspaceControlGetExists($workspaceControlName)) {string $sourceFilename = getSourceFilename($mainProcName);string $uiScript = "if (!`exists " + $buildProcName + "`)" + " source \"" + $sourceFilename + "\"; " + $buildProcName + "();";string $nkSnippetWindow = `workspaceControl -dup false -fl true -l $mainProcName -rt false -ui $uiScript$workspaceControlName`;}}global string $nkUIControls[];proc nkUIAppendControls(string $controls[]) {global string $nkUIControls[];for ($control in $controls) {$nkUIControls[`size $nkUIControls`] = $control;}}proc nkUIRemoveControls(string $root, string $end) {global string $nkUIControls[];string $paths[];for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";int $shouldRemove = (!`size $end`) ? $first == $root : $first == $root && $last == $end;if ($shouldRemove) $paths[`size $paths`] = $control;}if (`size $paths` > 0) {$nkUIControls = stringArrayRemove($paths, $nkUIControls);}}proc string nkUIGetControl(string $root, string $end) {global string $nkUIControls[];string $path;for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";if ($first == $root && $last == $end) {$path = $control;break;}}return $path;}proc string nkUIGetParentableWindow(string $windowName) {string $window = nkUIGetControl($windowName, $windowName);if (isWorkspaceControl($window) && !workspaceControlGetFloating($window)) {$window = "MayaWindow";}return $window;}

// /////////////////////////////////////////////////////////////////////////////
// コアプロシージャ
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <string>
*/
proc string loadScriptDirname() {
  // print("loadScriptDirname\n"); // debug
  string $scriptDirname;
  if (`optionVar -ex "nkSnippetScriptDirname"`) {
    $scriptDirname = `optionVar -q "nkSnippetScriptDirname"`;
  }
  return $scriptDirname;
}

/*-
@returns <>
*/
proc saveScriptDirname() {
  // print("saveScriptDirname\n"); // debug
  string $scriptDirnameText = nkUIGetControl("nkSnippetWindow", "scriptDirnameText");
  string $scriptDirname = textFieldGrpGetText($scriptDirnameText);
  // print("  scriptDirname:" + $scriptDirname + "\n"); // debug
  optionVar -sv "nkSnippetScriptDirname" $scriptDirname;
}

/*-
@param $dirname <string>
@returns <string[]>
*/
proc string[] getScriptFilenames(string $dirname) {
  return (getFilenames($dirname, "*.mel"));
}

/*-
@returns <>
*/
proc executeScript() {
  // print("executeScript\n"); // debug
  string $filenameList = nkUIGetControl("nkSnippetWindow", "filenameList");
  string $selectItem = textScrollListGetSelectItem($filenameList);
  // print("  selectItem:" + $selectItem + "\n"); // debug
  if (!`size $selectItem`) return;

  string $scriptDirnameText = nkUIGetControl("nkSnippetWindow", "scriptDirnameText");
  string $scriptDirname = textFieldGrpGetText($scriptDirnameText);
  string $scriptFilename = $scriptDirname + "/" + $selectItem;
  // print("  scriptFilename:" + $scriptFilename + "\n"); // debug

  if (existsFilename($scriptFilename)) {
    catch (eval ("source \"" + $scriptFilename + "\""));
  }
  else {
    warning -n ("file: " + $scriptFilename + ": Does not exist");
  }
}

// /////////////////////////////////////////////////////////////////////////////
// UI
// /////////////////////////////////////////////////////////////////////////////
/*-
@param $input <string>
@returns <string>
*/
proc string sanitizeText(string $input) {
  $input = substituteAllString($input, "\\", "/");
  return $input;
}

/*-
@param $input <string>
@returns <string>
*/
proc string trimEndSeparator(string $input) {
  return `substitute "/+$" $input ""`;
}

/*-
@returns <>
*/
proc updateFilenameList() {
  // print("updateFilenameList\n"); // debug
  string $filenameList = nkUIGetControl("nkSnippetWindow", "filenameList");
  textScrollListRemoveAll($filenameList);

  string $scriptDirnameText = nkUIGetControl("nkSnippetWindow", "scriptDirnameText");
  string $scriptDirname = textFieldGrpGetText($scriptDirnameText);
  // print("  scriptDirname:" + $scriptDirname + "\n"); // debug

  if (existsDirname($scriptDirname)) {
    string $filenames[] = getScriptFilenames($scriptDirname);
    // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
    for ($filename in $filenames) {
      textScrollListAppend(basename($filename, ""), $filenameList);
    }
  }
}

// -----------------------------------------------------------------------------
// UIコントロールイベント
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc nkSnippetWindowClosed() {
  // print("nkSnippetWindowClosed\n"); // debug
  nkUIRemoveControls("nkSnippetWindow", "");
}

/*-
@returns <>
*/
proc resetWindowMenuItemSelected() {
  // print("resetWindowMenuItemSelected\n"); // debug
  string $nkSnippetWindow = nkUIGetControl("nkSnippetWindow", "nkSnippetWindow");
  // print("  nkSnippetWindow:" + $nkSnippetWindow + "\n"); // debug
  windowPrefRemove($nkSnippetWindow);
  nkSnippet();
}

/*-
@returns <>
*/
proc quitMenuItemSelected() {
  // print("quitMenuItemSelected\n"); // debug
  string $nkSnippetWindow = nkUIGetControl("nkSnippetWindow", "nkSnippetWindow");
  // print("  nkSnippetWindow:" + $nkSnippetWindow + "\n"); // debug
  windowClose($nkSnippetWindow);
}

/*-
@returns <>
*/
proc aboutMenuItemSelected() {
  // print("aboutMenuItemSelected\n"); // debug
  confirmDialog
      -b "OK"
      -db "OK"
      -m (
        "nkSnippet " + (nkSnippetVersion())
        + "\n\nMIT License\nhttps://github.com/imaoki/nkSnippet"
      )
      -p (nkUIGetParentableWindow("nkSnippetWindow"))
      -t "About nkSnippet";
}

/*-
@returns <>
*/
proc executeButtonPressed() {
  // print("executeButtonPressed\n"); // debug
  executeScript();
}

/*-
@returns <>
*/
proc filenameListDoubleClicked() {
  // print("filenameListDoubleClicked\n"); // debug
  executeScript();
}

/*-
@returns <>
*/
proc scriptDirnameTextEntered() {
  // print("scriptDirnameTextEntered\n"); // debug
  string $scriptDirnameText = nkUIGetControl("nkSnippetWindow", "scriptDirnameText");
  string $currentText = textFieldGrpGetText($scriptDirnameText);
  // print("  currentText:" + $currentText + "\n"); // debug
  string $newText = trimEndSeparator(sanitizeText($currentText) + "/");
  // print("  newText    :" + $currentText + "\n"); // debug
  if ($newText != $currentText) {
    int $position = textFieldGrpGetInsertionPosition($scriptDirnameText);
    // print("  position:" + $position + "\n"); // debug
    textFieldGrpSetText($newText, $scriptDirnameText);
    textFieldGrpSetInsertionPosition($position, $scriptDirnameText);
  }
  saveScriptDirname();
  updateFilenameList();
}

/*-
@returns <>
*/
proc refreshListButtonPressed() {
  // print("refreshListButtonPressed\n"); // debug
  updateFilenameList();
}

/*-
@param $window <string>
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkSnippetInvokeEvent(
  string $window,
  string $event,
  string $control
) {
  switch ($window) {
    case "nkSnippetWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "resetWindowMenuItem": resetWindowMenuItemSelected(); break;
            case "quitMenuItem": quitMenuItemSelected(); break;
            case "aboutMenuItem": aboutMenuItemSelected(); break;
            case "refreshListButton": refreshListButtonPressed(); break;
            case "executeButton": executeButtonPressed(); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkSnippetWindow": nkSnippetWindowClosed(); break;
            case "scriptDirnameText": scriptDirnameTextEntered(); break;
            default: break;
          }
          break;
        case "dcc":
          switch ($control) {
            case "filenameList": filenameListDoubleClicked(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    default: break;
  }
}

// -----------------------------------------------------------------------------
// ウィンドウ定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc buildMainWindow() {
  // print("buildMainWindow\n"); // debug
  windowClose("nkSnippetWindow");

  string $nkSnippetWindow = `window
      -mxb false
      -mnb false
      -s true
      -t "nkSnippet"
      "nkSnippetWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $menuBar = `menuBarLayout
          // -bgc 0.25 0.5 0.25
          "menuBar"`;
        string $fileMenu = `menu
            -l "File"
            "fileMenu"`;
          string $resetWindowMenuItem = `menuItem
              -l "Reset Window"
              "resetWindowMenuItem"`;
          menuItem -d true;
          string $quitMenuItem = `menuItem
              -l "Quit"
              "quitMenuItem"`;
        string $helpMenu = `menu
            -hm true
            -l "Help"
            "helpMenu"`;
          string $aboutMenuItem = `menuItem
              -l "About nkSnippet"
              "aboutMenuItem"`;
      setParent ..;

      string $scriptManipRow = `rowLayout
          -adj 2
          // -bgc 0.5 0.25 0.25
          -nc 2
          "scriptManipRow"`;
        string $executeButton = `iconTextButton
            -ann "Execute"
            // -bgc 0.25 0.5 0.5
            -i "execute.png"
            -w 23
            "executeButton"`;
        separator -st "none" -vis false;
      setParent ..;

      string $filenameList = `textScrollList -ams false -h 31 "filenameList"`;

      string $listManipRow = `rowLayout
          -adj 1
          // -bgc 0.5 0.25 0.25
          -nc 2
          "listManipRow"`;
        string $scriptDirnameText = `textFieldGrp
            -adj 2
            -cw2 0 10
            -l ""
            -tx (loadScriptDirname())
            "scriptDirnameText"`;
        string $refreshListButton = `iconTextButton
            -ann "Refresh"
            // -bgc 0.25 0.5 0.5
            -i "refresh.png"
            -w 23
            "refreshListButton"`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $menuBar "top" 0
      -af $menuBar "left" 0
      -af $menuBar "right" 0
      -ac $scriptManipRow "top" 0 $menuBar
      -af $scriptManipRow "left" 5
      -af $scriptManipRow "right" 5
      -ac $filenameList "top" 5 $scriptManipRow
      -af $filenameList "left" 5
      -af $filenameList "right" 5
      -ac $filenameList "bottom" 5 $listManipRow
      -af $listManipRow "left" 5
      -af $listManipRow "right" 5
      -af $listManipRow "bottom" 5
      $outerForm;

  window -e -cc "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"cc\", \"nkSnippetWindow\");" $nkSnippetWindow;
  menuItem -e -c "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"c\", \"resetWindowMenuItem\");" $resetWindowMenuItem;
  menuItem -e -c "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"c\", \"quitMenuItem\");" $quitMenuItem;
  menuItem -e -c "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"c\", \"aboutMenuItem\");" $aboutMenuItem;
  iconTextButton -e -c "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"c\", \"executeButton\");" $executeButton;
  textScrollList -e -dcc "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"dcc\", \"filenameList\");" $filenameList;
  textFieldGrp -e -cc "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"cc\", \"scriptDirnameText\");" $scriptDirnameText;
  iconTextButton -e -c "nkSnippetInvokeEvent(\"nkSnippetWindow\", \"c\", \"refreshListButton\");" $refreshListButton;

  // print("  " + $nkSnippetWindow + "\n"); // debug
  // print("  " + $outerForm + "\n"); // debug
  // print("  " + $menuBar + "\n"); // debug
  // print("  " + $fileMenu + "\n"); // debug
  // print("  " + $resetWindowMenuItem + "\n"); // debug
  // print("  " + $quitMenuItem + "\n"); // debug
  // print("  " + $helpMenu + "\n"); // debug
  // print("  " + $aboutMenuItem + "\n"); // debug
  // print("  " + $scriptManipRow + "\n"); // debug
  // print("  " + $executeButton + "\n"); // debug
  // print("  " + $filenameList + "\n"); // debug
  // print("  " + $listManipRow + "\n"); // debug
  // print("  " + $scriptDirnameText + "\n"); // debug
  // print("  " + $refreshListButton + "\n"); // debug

  nkUIAppendControls({
    $nkSnippetWindow,
    $scriptDirnameText,
    $filenameList
  });

  updateFilenameList();

  setFocus $nkSnippetWindow;
  showWindow $nkSnippetWindow;
}

// -----------------------------------------------------------------------------
// システムイベント
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
// proc registerScriptJob() {
// }

// -----------------------------------------------------------------------------
// メイン
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc initialize() {
  buildMainWindow();
  // registerScriptJob();
}

/*-
@returns <string>
*/
global proc string nkSnippetVersion() {
  return "1.4.0";
}

/*-
@returns <>
*/
global proc nkSnippet() {
  initialize();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkSnippet/nkSnippet.mel\"");
nkSnippet;
*/
