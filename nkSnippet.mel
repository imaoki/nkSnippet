/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// ボイラープレート
// /////////////////////////////////////////////////////////////////////////////
/*1.9.1:File*/proc int isValidFilename(string $input) {return (`match "[:\?\"\*/\\<>\|\n\r\t]" $input` == "");}proc string escapeInvalidFileNameChars(string $input, string $replacement) {string $pattern = "[:\?\"\*/\\<>\|\n\r\t]";while (`match $pattern $replacement` != "") {$replacement = `substitute $pattern $replacement "_"`;}string $result = $input;while (`match $pattern $result` != "") {$result = `substitute $pattern $result $replacement`;}return $result;}proc string getSourceFilename(string $procName) {string $filename;string $thisIs = `whatIs $procName`;string $pattern1 = "^Mel procedure found in: *";string $pattern2 = "^Script found in: *";if (`match $pattern1 $thisIs` != "") {$filename = `substitute $pattern1 $thisIs ""`;}else if (`match $pattern2 $thisIs` != "") {$filename = `substitute $pattern2 $thisIs ""`;}return $filename;}proc string getSourceDirname(string $procName) {return dirname(getSourceFilename($procName));}proc int existsDirname(string $dirname) {return `filetest -d $dirname`;}proc int existsFilename(string $filename) {return `filetest -f $filename`;}proc string[] getDirnames(string $dirname) {string $subDirnames[];string $filenames[] = `getFileList -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {string $subDirname = $dirname + "/" + $filenames[$i];if (existsDirname($subDirname)) {$subDirnames[`size $subDirnames`] = $subDirname;}}$subDirnames = `sortCaseInsensitive $subDirnames`;return $subDirnames;}proc string[] getFilenames(string $dirname, string $filenamePattern) {string $filenames[] = `getFileList -fs $filenamePattern -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {$filenames[$i] = $dirname + "/" + $filenames[$i];}$filenames = `sortCaseInsensitive $filenames`;return $filenames;}proc string getOpenFilename(string $caption, string $fileFilter) {string $filename;string $filenames[] = `fileDialog2 -cap $caption -ds 2 -ff $fileFilter -fm 1`;if (`size $filenames`) $filename = $filenames[0];return $filename;}proc string getSaveFilename(string $caption, string $fileFilter) {string $filename;string $filenames[] = `fileDialog2 -cap $caption -ds 2 -ff $fileFilter -fm 0`;if (`size $filenames`) $filename = $filenames[0];return $filename;}proc string[] readAllLines(string $filename) {string $lines[];if (!existsFilename($filename)) return $lines;$lines = `freadAllLines $filename`;int $numLines = `size $lines`;int $endIndex = $numLines - 1;if ($numLines > 0 && !`size $lines[$endIndex]`) {stringArrayRemoveAtIndex($endIndex, $lines);}return $lines;}proc string readAllText(string $filename) {string $text;if (!existsFilename($filename)) return $text;string $intermidiate = `freadAllText $filename`;$text = $intermidiate;int $isEqual = false;while (!$isEqual) {$intermidiate = `substitute "\r" $intermidiate ""`;$isEqual = $intermidiate == $text;$text = $intermidiate;}return $text;}proc int writeAllText(string $filename, string $input) {string $dirname = dirname($filename);if (!existsDirname($dirname)) return false;fwriteAllText $filename $input;return (existsFilename($filename));}proc int writeAllLines(string $filename, string $lines[]) {string $text = stringArrayToString($lines, "\n");if (`size $lines`) $text += "\n";return (writeAllText($filename, $text));}proc int makeDirs(string $dirname) {if (existsDirname($dirname)) return true;if (existsFilename($dirname)) return false;sysFile -md $dirname;return (existsDirname($dirname));}proc int moveDir(string $sourceDirname, string $destDirname) {if (!existsDirname($sourceDirname)) return false;if (existsDirname($destDirname) || existsFilename($destDirname)) return false;sysFile -ren $destDirname $sourceDirname;return (!existsDirname($sourceDirname) && existsDirname($destDirname));}proc int moveFile(string $sourceFilename, string $destFilename) {if (!existsFilename($sourceFilename)) return false;if (existsDirname($destFilename) || existsFilename($destFilename)) return false;sysFile -ren $destFilename $sourceFilename;return (!existsFilename($sourceFilename) && existsFilename($destFilename));}proc int deleteDir(string $dirname) {if (!existsDirname($dirname)) return false;sysFile -red $dirname;return (!existsDirname($dirname));}proc int deleteFile(string $filename) {if (!existsFilename($filename)) return false;sysFile -del $filename;return (!existsFilename($filename));}
/*2.2.1:UIControl*/global string $nkUIControls[];proc appendUIControls(string $controls[]) {global string $nkUIControls[];for ($control in $controls) {$nkUIControls[`size $nkUIControls`] = $control;}}proc string getUIControl(string $root, string $end) {global string $nkUIControls[];string $path;for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";if ($first == $root && $last == $end) {$path = $control;break;}}return $path;}proc removeUIControls(string $root, string $end) {global string $nkUIControls[];string $paths[];for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";int $shouldRemove = (!`size $end`) ? $first == $root : $first == $root && $last == $end;if ($shouldRemove) $paths[`size $paths`] = $control;}if (`size $paths` > 0) {$nkUIControls = stringArrayRemove($paths, $nkUIControls);}}proc string uiControlTypeOf(string $control) {string $type;if (!`size $control`) return $type;$type = `objectTypeUI $control`;if ($type == "floatingWindow") $type = "window";return $type;}proc int qEnable(string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return true;return `control -q -en $control`;}proc eEnable(int $bValue, string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return;control -e -en $bValue $control;}proc int qExists(string $control) {return `control -q -ex $control`;}proc int qVisible(string $control) {return `control -q -vis $control`;}proc eVisible(int $bValue, string $control) {control -e -vis $bValue $control;}proc float qFloat(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eFloat(string $type, string $flag, float $fValue, string $control) {eval $type "-e" $flag $fValue $control;}proc int qInt(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eInt(string $type, string $flag, int $iValue, string $control) {eval $type "-e" $flag $iValue $control;}proc string qString(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eString(string $type, string $flag, string $sValue, string $control) {eval $type "-e" $flag ("\"" + $sValue + "\"") $control;}proc float[] qFloatArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc int[] qIntArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc string[] qStringArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eFloat2Array(string $type, string $flag, float $fValues[], string $control) {eval $type "-e" $flag $fValues[0] $fValues[1] $control;}proc eFloat3Array(string $type, string $flag, float $fValues[], string $control) {eval $type "-e" $flag $fValues[0] $fValues[1] $fValues[2] $control;}proc eFloat4Array(string $type, string $flag, float $fValues[], string $control) {eval $type "-e" $flag $fValues[0] $fValues[1] $fValues[2] $fValues[3] $control;}proc eStringArray(string $type, string $flag, string $sValues[], string $control) {for ($sValue in $sValues) {eString($type, $flag, $sValue, $control);}}proc eOrderedFloat(string $type, string $flag, float $fValues[], string $control) {for ($i = 0; $i < `size $fValues`; $i++) {eFloat($type, ($flag + ($i + 1)), $fValues[$i], $control);}}proc eOrderedInt(string $type, string $flag, int $iValues[], string $control) {for ($i = 0; $i < `size $iValues`; $i++) {eInt($type, ($flag + ($i + 1)), $iValues[$i], $control);}}proc eOrderedString(string $type, string $flag, string $sValues[], string $control) {for ($i = 0; $i < `size $sValues`; $i++) {eString($type, ($flag + ($i + 1)), $sValues[$i], $control);}}proc int qIndex(string $type, string $flag, string $control) {return (qInt($type, $flag, $control) - 1);}proc eIndex(string $type, string $flag, int $index, string $control) {eInt($type, $flag, ($index + 1), $control);}proc int[] qIndexArray(string $type, string $flag, string $control) {int $indices[] = qIntArray($type, $flag, $control);for ($i = 0; $i < `size $indices`; $i++) $indices[$i] -= 1;return $indices;}proc eIndexArray(string $type, string $flag, int $indices[], string $control) {for ($i in $indices) {eInt($type, $flag, $i + 1, $control);}}proc int qFirstIndex(string $type, string $flag, string $control) {int $indices[] = qIndexArray($type, $flag, $control);return  ((`size $indices`) ? $indices[0] : -1);}proc string qFirstString(string $type, string $flag, string $control) {string $sValues[] = qStringArray($type, $flag, $control);return  ((`size $sValues`) ? $sValues[0] : "");}proc eIntString(string $type, string $flag, int $iValue, string $sValue, string $control) {eval $type "-e" $flag $iValue ("\"" + $sValue + "\"") $control;}proc eIndexString(string $type, string $flag, int $index, string $sValue, string $control) {eIntString($type, $flag, $index + 1, $sValue, $control);}proc eStringInt(string $type, string $flag, string $sValue, int $iValue, string $control) {eval $type "-e" $flag ("\"" + $sValue + "\"") $iValue $control;}proc executeUIControl(string $type, string $flag, string $control) {eval $type "-e" $flag $control;}proc string getParentableWindow(string $control) {if (uiControlTypeOf($control) == "workspaceControl" && !qInt("workspaceControl", "-fl", $control)) {return "MayaWindow";}else {return $control;}}proc windowClose(string $control) {if (qExists($control)) {string $type = uiControlTypeOf($control);switch ($type) {case "window": deleteUI $control; break;case "workspaceControl": executeUIControl("workspaceControl", "-cl", $control);break;default: break;}}}proc windowPrefRemove(string $type, string $control) {if (qExists($control)) windowClose($control);switch ($type) {case "window": if (qInt("windowPref", "-ex", $control)) {windowPref -r $control;}break;case "workspaceControl": if (qInt("workspaceControlState", "-ex", $control)) {workspaceControlState -r $control;}break;default: break;}}proc string buildWorkspaceControl(string $workspaceControlName,string $label,string $buildProcName,string $buildProcFilename) {string $control = $workspaceControlName;if (!qExists($workspaceControlName)) {string $uiScript = "if (!`exists " + $buildProcName + "`)" + " source \"" + $buildProcFilename + "\"; " + $buildProcName + "();";$control = `workspaceControl -dup false -fl true -l $label -rt false -ui $uiScript$workspaceControlName`;}return $control;}

// /////////////////////////////////////////////////////////////////////////////
// ドメイン
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <string>
*/
proc string loadScriptDirname() {
  // print("loadScriptDirname\n"); // debug
  string $dirname;
  if (`optionVar -ex "nkSnippetScriptDirname"`) {
    $dirname = `optionVar -q "nkSnippetScriptDirname"`;
  }
  return $dirname;
}

/*-
@param $dirname <string>
@returns <>
*/
proc saveScriptDirname(string $dirname) {
  // print("saveScriptDirname\n"); // debug
  // print("  dirname:" + $dirname + "\n"); // debug
  optionVar -sv "nkSnippetScriptDirname" $dirname;
}

/*-
@param $dirname <string>
@returns <string[]>
*/
proc string[] getScriptFilenames(string $dirname) {
  return (getFilenames($dirname, "*.mel"));
}

/*-
@param $filename <string>
@returns <>
*/
proc executeScript(string $filename) {
  // print("executeScript\n"); // debug
  // print("  filename:" + $filename + "\n"); // debug
  if (existsFilename($filename)) {
    catch (eval ("source \"" + $filename + "\""));
  }
  else {
    warning -n ("file: " + $filename + ": Does not exist");
  }
}

// /////////////////////////////////////////////////////////////////////////////
// スクリプトジョブ
// /////////////////////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------------
// イベントジョブ
// -----------------------------------------------------------------------------
// /*-
// @returns <>
// */
// proc registerEventJob() {
//   print("registerEventJob\n"); // debug
// }

// /*-
// @returns <>
// */
// proc unregisterEventJob() {
//   print("unregisterEventJob\n"); // debug
// }

// /////////////////////////////////////////////////////////////////////////////
// プレゼンテーション
// /////////////////////////////////////////////////////////////////////////////
/*-
@param $input <string>
@returns <string>
*/
proc string sanitizeText(string $input) {
  $input = substituteAllString($input, "\\", "/");
  return $input;
}

/*-
@param $input <string>
@returns <string>
*/
proc string trimEndSeparator(string $input) {
  return `substitute "/+$" $input ""`;
}

/*-
@returns <>
*/
proc updateFilenameList() {
  // print("updateFilenameList\n"); // debug
  string $filenameList = getUIControl("nkSnippetWindow", "filenameList");
  executeUIControl("textScrollList", "-ra", $filenameList);
  string $scriptDirnameText = getUIControl("nkSnippetWindow", "scriptDirnameText");
  string $scriptDirname = qString("textFieldGrp", "-tx", $scriptDirnameText);
  // print("  scriptDirname:" + $scriptDirname + "\n"); // debug
  if (existsDirname($scriptDirname)) {
    string $filenames[] = getScriptFilenames($scriptDirname);
    // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
    for ($filename in $filenames) {
      eString("textScrollList", "-a", basename($filename, ""), $filenameList);
    }
  }
}

/*-
@returns <string>
*/
proc string getScriptDirname() {
  // print("getScriptDirname\n"); // debug
  string $scriptDirnameText = getUIControl("nkSnippetWindow", "scriptDirnameText");
  return qString("textFieldGrp", "-tx", $scriptDirnameText);
}

/*-
@returns <string>
*/
proc string getSelectedScriptFilename() {
  // print("getSelectedScriptFilename\n"); // debug
  string $filenameList = getUIControl("nkSnippetWindow", "filenameList");
  string $filename = qFirstString("textScrollList", "-si", $filenameList);
  return (getScriptDirname() + "/" + $filename);
}

// -----------------------------------------------------------------------------
// UIコントロールイベントハンドラ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc nkSnippetWindowClosed() {
  // print("nkSnippetWindowClosed\n"); // debug
  removeUIControls("nkSnippetWindow", "");
}

/*-
@returns <>
*/
proc resetWindowMenuItemSelected() {
  // print("resetWindowMenuItemSelected\n"); // debug
  windowPrefRemove("window", "nkSnippetWindow");
  nkSnippet();
}

/*-
@returns <>
*/
proc quitMenuItemSelected() {
  // print("quitMenuItemSelected\n"); // debug
  string $nkSnippetWindow = getUIControl("nkSnippetWindow", "nkSnippetWindow");
  // print("  nkSnippetWindow:" + $nkSnippetWindow + "\n"); // debug
  windowClose($nkSnippetWindow);
}

/*-
@returns <>
*/
proc aboutMenuItemSelected() {
  // print("aboutMenuItemSelected\n"); // debug
  confirmDialog
      -b "OK"
      -db "OK"
      -m (
        "nkSnippet " + (nkSnippetVersion())
            + "\n\nMIT License\nhttps://github.com/imaoki/nkSnippet"
      )
      -p (getParentableWindow("nkSnippetWindow"))
      -t "About - nkSnippet";
}

/*-
@returns <>
*/
proc executeButtonPressed() {
  // print("executeButtonPressed\n"); // debug
  executeScript(getSelectedScriptFilename());
}

/*-
@returns <>
*/
proc filenameListDoubleClicked() {
  // print("filenameListDoubleClicked\n"); // debug
  executeScript(getSelectedScriptFilename());
}

/*-
@returns <>
*/
proc scriptDirnameTextEntered() {
  // print("scriptDirnameTextEntered\n"); // debug
  string $scriptDirnameText = getUIControl("nkSnippetWindow", "scriptDirnameText");
  string $currentText = qString("textFieldGrp", "-tx", $scriptDirnameText);
  // print("  currentText:" + $currentText + "\n"); // debug
  string $newText = trimEndSeparator(sanitizeText($currentText) + "/");
  // print("  newText    :" + $currentText + "\n"); // debug
  if ($newText != $currentText) {
    int $position = qIndex("textFieldGrp", "-ip", $scriptDirnameText);
    // print("  position:" + $position + "\n"); // debug
    eString("textFieldGrp", "-tx", $newText, $scriptDirnameText);
    eIndex("textFieldGrp", "-ip", $position, $scriptDirnameText);
  }
  saveScriptDirname(getScriptDirname());
  updateFilenameList();
}

/*-
@returns <>
*/
proc refreshListButtonPressed() {
  // print("refreshListButtonPressed\n"); // debug
  updateFilenameList();
}

// -----------------------------------------------------------------------------
// ウィンドウ定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc buildMainWindow() {
  // print("buildMainWindow\n"); // debug
  windowClose("nkSnippetWindow");

  string $nkSnippetWindow = `window
      -mxb false
      -mnb false
      -s true
      -t "nkSnippet"
      "nkSnippetWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $menuBar = `menuBarLayout
          // -bgc 0.25 0.5 0.25
          "menuBar"`;
        string $fileMenu = `menu
            -l "File"
            "fileMenu"`;
          string $resetWindowMenuItem = `menuItem
              -l "Reset Window"
              "resetWindowMenuItem"`;
          menuItem -d true;
          string $quitMenuItem = `menuItem
              -l "Quit"
              "quitMenuItem"`;
        string $helpMenu = `menu
            -hm true
            -l "Help"
            "helpMenu"`;
          string $aboutMenuItem = `menuItem
              -l "About nkSnippet"
              "aboutMenuItem"`;
      setParent ..;

      string $topToolRow = `rowLayout
          -adj 2
          // -bgc 0.5 0.25 0.25
          -nc 2
          "topToolRow"`;
        string $executeButton = `iconTextButton
            -ann "Execute"
            // -bgc 0.25 0.5 0.5
            -i "execute.png"
            -w 23
            "executeButton"`;
        separator -st "none" -vis false;
      setParent ..;

      string $filenameList = `textScrollList
          -ams false
          -ekf false
          -h 31
          "filenameList"`;

      string $bottomToolRow = `rowLayout
          -adj 1
          // -bgc 0.5 0.25 0.25
          -nc 2
          "bottomToolRow"`;
        string $scriptDirnameText = `textFieldGrp
            -adj 2
            -cw2 0 10
            -l ""
            -tx (loadScriptDirname())
            "scriptDirnameText"`;
        string $refreshListButton = `iconTextButton
            -ann "Refresh"
            // -bgc 0.25 0.5 0.5
            -i "refresh.png"
            -w 23
            "refreshListButton"`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $menuBar "top" 0
      -af $menuBar "left" 0
      -af $menuBar "right" 0
      -ac $topToolRow "top" 0 $menuBar
      -af $topToolRow "left" 5
      -af $topToolRow "right" 5
      -ac $filenameList "top" 5 $topToolRow
      -af $filenameList "left" 5
      -af $filenameList "right" 5
      -ac $filenameList "bottom" 5 $bottomToolRow
      -af $bottomToolRow "left" 5
      -af $bottomToolRow "right" 5
      -af $bottomToolRow "bottom" 5
      $outerForm;

  window -e -cc "nkSnippetEventController(\"nkSnippetWindow\", \"cc\", \"nkSnippetWindow\");" $nkSnippetWindow;
  menuItem -e -c "nkSnippetEventController(\"nkSnippetWindow\", \"c\", \"resetWindowMenuItem\");" $resetWindowMenuItem;
  menuItem -e -c "nkSnippetEventController(\"nkSnippetWindow\", \"c\", \"quitMenuItem\");" $quitMenuItem;
  menuItem -e -c "nkSnippetEventController(\"nkSnippetWindow\", \"c\", \"aboutMenuItem\");" $aboutMenuItem;
  iconTextButton -e -c "nkSnippetEventController(\"nkSnippetWindow\", \"c\", \"executeButton\");" $executeButton;
  textScrollList -e -dcc "nkSnippetEventController(\"nkSnippetWindow\", \"dcc\", \"filenameList\");" $filenameList;
  textFieldGrp -e -cc "nkSnippetEventController(\"nkSnippetWindow\", \"cc\", \"scriptDirnameText\");" $scriptDirnameText;
  iconTextButton -e -c "nkSnippetEventController(\"nkSnippetWindow\", \"c\", \"refreshListButton\");" $refreshListButton;

  appendUIControls({
    $nkSnippetWindow,
    $scriptDirnameText,
    $filenameList
  });

  updateFilenameList();
  showWindow $nkSnippetWindow;
  setFocus $nkSnippetWindow;
}

// -----------------------------------------------------------------------------
// イベントコントローラ
// -----------------------------------------------------------------------------
/*-
@param $window <string>
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkSnippetEventController(
  string $window,
  string $event,
  string $control
) {
  // print("nkSnippetEventController\n"); // debug
  // print("  window :" + $window + "\n"); // debug
  // print("  event  :" + $event + "\n"); // debug
  // print("  control:" + $control + "\n"); // debug
  switch ($window) {
    case "nkSnippetWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "resetWindowMenuItem": resetWindowMenuItemSelected(); break;
            case "quitMenuItem": quitMenuItemSelected(); break;
            case "aboutMenuItem": aboutMenuItemSelected(); break;
            case "refreshListButton": refreshListButtonPressed(); break;
            case "executeButton": executeButtonPressed(); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkSnippetWindow": nkSnippetWindowClosed(); break;
            case "scriptDirnameText": scriptDirnameTextEntered(); break;
            default: break;
          }
          break;
        case "dcc":
          switch ($control) {
            case "filenameList": filenameListDoubleClicked(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    default: break;
  }
}

// -----------------------------------------------------------------------------
// ドメインオブザーバ
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// イベントオブザーバ
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// メイン
// -----------------------------------------------------------------------------
/*-
@returns <string>
*/
global proc string nkSnippetVersion() {
  return "1.6.6";
}

/*-
@returns <>
*/
global proc nkSnippet() {
  buildMainWindow();
  // registerEventJob();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkSnippet/nkSnippet.mel\"");
nkSnippet;
*/
